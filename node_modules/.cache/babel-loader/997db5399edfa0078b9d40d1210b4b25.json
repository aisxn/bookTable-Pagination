{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidil\\\\Desktop\\\\aika\\\\lessons\\\\bookTable-Pagination\\\\src\\\\components\\\\BookTable\\\\BookTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Form, Table } from \"react-bootstrap\";\nimport { PencilFill, Save, Trash, XSquare } from 'react-bootstrap-icons';\nimport './BookTable.styles.scss';\nimport TablePagination from \"../TablePagination\";\nimport EnitableTable from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BookTable = ({\n  columns,\n  rows,\n  actions\n}) => {\n  _s();\n\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [rowIDToEdit, setRowIDToEdit] = useState(undefined);\n  const [rowsState, setRowsState] = useState(rows);\n  const [editedRow, setEditedRow] = useState();\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    if (currentPage >= rows.length / pageSize) setCurrentPage(1);\n  }, [pageSize]);\n  useMemo(() => {\n    const firstPageIndex = (currentPage - 1) * pageSize;\n    const lastPageIndex = firstPageIndex + pageSize;\n    const newData = rows.slice(firstPageIndex, lastPageIndex);\n    setRowsState(newData);\n  }, [currentPage, pageSize]);\n\n  const handleEdit = rowID => {\n    setIsEditMode(true);\n    setEditedRow(undefined);\n    setRowIDToEdit(rowID);\n  };\n\n  const handleRemoveRow = rowID => {\n    const newData = rowsState.filter(row => {\n      return row.id !== rowID ? row : null;\n    });\n    setRowsState(newData);\n  };\n\n  const handleOnChangeField = (e, rowID) => {\n    const {\n      name: fieldName,\n      value\n    } = e.target;\n    setEditedRow({\n      id: rowID,\n      [fieldName]: value\n    });\n  };\n\n  const handleCancelEditing = () => {\n    setIsEditMode(false);\n    setEditedRow(undefined);\n  };\n\n  const handleSaveRowChanges = () => {\n    setTimeout(() => {\n      setIsEditMode(false);\n      const newData = rowsState.map(row => {\n        if (row.id === editedRow.id) {\n          if (editedRow.title) row.title = editedRow.title;\n          if (editedRow.author) row.author = editedRow.author;\n          if (editedRow.place) row.place = editedRow.place;\n        }\n\n        return row;\n      });\n      setRowsState(newData);\n      setEditedRow(undefined);\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: columns.map(column => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              children: column.fieldName\n            }, column.field, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: rowsState.map((row, index) => {\n          if (index < pageSize) {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: isEditMode && rowIDToEdit === row.id ? /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: editedRow ? editedRow.title : row.title,\n                  id: row.id,\n                  name: \"title\",\n                  onChange: e => handleOnChangeField(e, row.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this) : row.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: isEditMode && rowIDToEdit === row.id ? /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  defaultValue: editedRow ? editedRow.author : row.author,\n                  id: row.id,\n                  name: \"author\",\n                  onChange: e => handleOnChangeField(e, row.id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 21\n                }, this) : row.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: isEditMode && rowIDToEdit === row.id ? /*#__PURE__*/_jsxDEV(Form.Select, {\n                  onChange: e => handleOnChangeField(e, row.id),\n                  name: \"place\",\n                  defaultValue: row.place,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0410\\u0440\\u0433\\u0435\\u043D\\u0442\\u0438\\u043D\\u0430\",\n                    children: \"\\u0410\\u0440\\u0433\\u0435\\u043D\\u0442\\u0438\\u043D\\u0430\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0411\\u0440\\u0430\\u0437\\u0438\\u043B\\u0438\\u044F\",\n                    children: \"\\u0411\\u0440\\u0430\\u0437\\u0438\\u043B\\u0438\\u044F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0412\\u044C\\u0435\\u0442\\u043D\\u0430\\u043C\",\n                    children: \"\\u0412\\u044C\\u0435\\u0442\\u043D\\u0430\\u043C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0413\\u0440\\u0435\\u0446\\u0438\\u044F\",\n                    children: \"\\u0413\\u0440\\u0435\\u0446\\u0438\\u044F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0414\\u0430\\u043D\\u0438\\u044F\",\n                    children: \"\\u0414\\u0430\\u043D\\u0438\\u044F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0415\\u0433\\u0438\\u043F\\u0435\\u0442\",\n                    children: \"\\u0415\\u0433\\u0438\\u043F\\u0435\\u0442\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u0418\\u043D\\u0434\\u043E\\u043D\\u0435\\u0437\\u0438\\u044F\",\n                    children: \"\\u0418\\u043D\\u0434\\u043E\\u043D\\u0435\\u0437\\u0438\\u044F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u041A\\u0438\\u0442\\u0430\\u0439\",\n                    children: \"\\u041A\\u0438\\u0442\\u0430\\u0439\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u041B\\u0430\\u0442\\u0432\\u0438\\u044F\",\n                    children: \"\\u041B\\u0430\\u0442\\u0432\\u0438\\u044F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\\u041C\\u0435\\u043A\\u0441\\u0438\\u043A\\u0430\",\n                    children: \"\\u041C\\u0435\\u043A\\u0441\\u0438\\u043A\\u0430\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 21\n                }, this) : row.place\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 15\n              }, this), actions && /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [isEditMode && rowIDToEdit === row.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSaveRowChanges(),\n                  className: \"custom-table__action-btn\",\n                  disabled: !editedRow,\n                  children: /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEdit(row.id),\n                  className: \"custom-table__action-btn\",\n                  children: /*#__PURE__*/_jsxDEV(PencilFill, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 21\n                }, this), isEditMode && rowIDToEdit === row.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleCancelEditing(),\n                  className: \"custom-table__action-btn\",\n                  children: /*#__PURE__*/_jsxDEV(XSquare, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveRow(row.id),\n                  className: \"custom-table__action-btn\",\n                  children: /*#__PURE__*/_jsxDEV(Trash, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 15\n              }, this)]\n            }, row.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 20\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      totalCount: rows.length,\n      pageSize: pageSize,\n      changeItemsPerPage: page => setPageSize(page),\n      onPageChange: page => setCurrentPage(page),\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BookTable, \"3IVC/DwyoekPCDVFqjhMyvwmTPM=\");\n\n_c = BookTable;\nexport default BookTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookTable\");","map":{"version":3,"sources":["C:/Users/aidil/Desktop/aika/lessons/bookTable-Pagination/src/components/BookTable/BookTable.jsx"],"names":["React","useEffect","useMemo","useState","Form","Table","PencilFill","Save","Trash","XSquare","TablePagination","EnitableTable","BookTable","columns","rows","actions","isEditMode","setIsEditMode","rowIDToEdit","setRowIDToEdit","undefined","rowsState","setRowsState","editedRow","setEditedRow","pageSize","setPageSize","currentPage","setCurrentPage","length","firstPageIndex","lastPageIndex","newData","slice","handleEdit","rowID","handleRemoveRow","filter","row","id","handleOnChangeField","e","name","fieldName","value","target","handleCancelEditing","handleSaveRowChanges","setTimeout","map","title","author","place","column","field","index","page"],"mappings":"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","sourcesContent":["import React, {useEffect, useMemo, useState} from 'react';\r\nimport { Form, Table } from \"react-bootstrap\";\r\nimport { PencilFill, Save, Trash, XSquare } from 'react-bootstrap-icons';\r\nimport './BookTable.styles.scss';\r\nimport TablePagination from \"../TablePagination\";\r\nimport EnitableTable from '.';\r\n\r\nconst BookTable = ({ columns, rows, actions }) => {\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [rowIDToEdit, setRowIDToEdit] = useState(undefined);\r\n  const [rowsState, setRowsState] = useState(rows);\r\n  const [editedRow, setEditedRow] = useState();\r\n\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (currentPage >= rows.length / pageSize)\r\n      setCurrentPage(1);\r\n  }, [pageSize])\r\n\r\n  useMemo(() => {\r\n    const firstPageIndex = (currentPage - 1) * pageSize;\r\n    const lastPageIndex = firstPageIndex + pageSize;\r\n\r\n    const newData = rows.slice(firstPageIndex, lastPageIndex);\r\n\r\n    setRowsState(newData);\r\n  }, [currentPage, pageSize]);\r\n\r\n  const handleEdit = (rowID) => {\r\n    setIsEditMode(true);\r\n    setEditedRow(undefined);\r\n    setRowIDToEdit(rowID);\r\n  }\r\n\r\n  const handleRemoveRow = (rowID) => {\r\n    const newData = rowsState.filter(row => {\r\n      return row.id !== rowID ? row : null\r\n    });\r\n\r\n    setRowsState(newData);\r\n  }\r\n\r\n  const handleOnChangeField = (e, rowID) => {\r\n    const { name: fieldName, value } = e.target;\r\n\r\n    setEditedRow({\r\n      id: rowID,\r\n      [fieldName]: value\r\n    })\r\n  }\r\n\r\n  const handleCancelEditing = () => {\r\n    setIsEditMode(false);\r\n    setEditedRow(undefined);\r\n  }\r\n\r\n  const handleSaveRowChanges = () => {\r\n    setTimeout(() => {\r\n      setIsEditMode(false);\r\n\r\n      const newData = rowsState.map(row => {\r\n        if (row.id === editedRow.id) {\r\n          if (editedRow.title) row.title = editedRow.title;\r\n          if (editedRow.author) row.author = editedRow.author;\r\n          if (editedRow.place) row.place = editedRow.place;\r\n        }\r\n\r\n        return row;\r\n      })\r\n\r\n      setRowsState(newData);\r\n      setEditedRow(undefined)\r\n    }, 1000)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n        <tr>\r\n          {columns.map((column) => {\r\n            return <th key={column.field}>{ column.fieldName }</th>\r\n          })}\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {rowsState.map((row, index) => {\r\n          if (index < pageSize) {\r\n            return <tr key={row.id}>\r\n              <td>\r\n                {row.id}\r\n              </td>\r\n              <td>\r\n                { isEditMode && rowIDToEdit === row.id\r\n                  ? <Form.Control\r\n                    type='text'\r\n                    defaultValue={editedRow ? editedRow.title : row.title}\r\n                    id={row.id}\r\n                    name='title'\r\n                    onChange={ (e) => handleOnChangeField(e, row.id) }\r\n                  />\r\n                  : row.title\r\n                }\r\n              </td>\r\n              <td>\r\n                { isEditMode && rowIDToEdit === row.id\r\n                  ? <Form.Control\r\n                    type='text'\r\n                    defaultValue={editedRow ? editedRow.author : row.author}\r\n                    id={row.id}\r\n                    name='author'\r\n                    onChange={ (e) => handleOnChangeField(e, row.id) }\r\n                  />\r\n                  : row.author\r\n                }\r\n              </td>\r\n              <td>\r\n                { isEditMode && rowIDToEdit === row.id\r\n                  ? <Form.Select onChange={e => handleOnChangeField(e, row.id)} name=\"place\" defaultValue={row.place}>\r\n                    <option value='Аргентина'>Аргентина</option>\r\n                    <option value='Бразилия'>Бразилия</option>\r\n                    <option value='Вьетнам'>Вьетнам</option>\r\n                    <option value='Греция'>Греция</option>\r\n                    <option value='Дания'>Дания</option>\r\n                    <option value='Египет'>Египет</option>\r\n                    <option value='Индонезия'>Индонезия</option>\r\n                    <option value='Китай'>Китай</option>\r\n                    <option value='Латвия'>Латвия</option>\r\n                    <option value='Мексика'>Мексика</option>\r\n                  </Form.Select>\r\n                  : row.place\r\n                }\r\n              </td>\r\n              {actions &&\r\n              <td>\r\n                { isEditMode && rowIDToEdit === row.id\r\n                  ? <button onClick={ () => handleSaveRowChanges() } className='custom-table__action-btn' disabled={!editedRow}>\r\n                    <Save />\r\n                  </button>\r\n                  : <button  onClick={ () => handleEdit(row.id) } className='custom-table__action-btn'>\r\n                    <PencilFill />\r\n                  </button>\r\n                }\r\n\r\n                { isEditMode && rowIDToEdit === row.id\r\n                  ? <button onClick={() => handleCancelEditing()} className='custom-table__action-btn'>\r\n                    <XSquare />\r\n                  </button>\r\n                  : <button onClick={() => handleRemoveRow(row.id)} className='custom-table__action-btn'>\r\n                    <Trash />\r\n                  </button>\r\n                }\r\n              </td>\r\n              }\r\n            </tr>\r\n          }\r\n        })}\r\n        </tbody>\r\n      </Table>\r\n      <TablePagination\r\n        totalCount={rows.length}\r\n        pageSize={pageSize}\r\n        changeItemsPerPage={page => setPageSize(page)}\r\n        onPageChange={page => setCurrentPage(page)}\r\n        currentPage={currentPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BookTable;"]},"metadata":{},"sourceType":"module"}